Главные зависимости:
1.express - фреймворк для бекенда
2.mongoose/mongodb - пакеты для работы с mongodb
3.dotenv - довольно простой контейнер для констант (.env)
4.cors - Для облегчения способов отправки запросов с браузера без проблем, прикольная штука
5.cookie-parser -грубо говоря для работы с куки
6.bcrypt/jsonwebtoken/express-validator - для логина
Дев. зависимости:
1.concurrently - прикол для запуска паралельно нескольких команд, тут для запуска 2х серверов с 1 терминала
2.nodemon - для перезапуска сервера каждый раз когда код сервера меняется

Логика технологий:
1. 2-х этапный токен. Аксес токен, который существует на сессию, и рефреш токен, который существует на продолжительное время до выхода или истечения срока

Файловая архитектура:
1.core.js - ядро сервера
2. .env - константы сервера(типа ссылки на бд и пр.)
3. routers: //Ссылки на круд запросы
- user-router - роуты для системы логин/регистр
4. models: // модели обьектов данных на бд
-user - модели для пользователя
5.controllers: // контролеры, грубо говоря мидвеар для логики и роутов, можно всё делать и в 1 файле, но для удобства читания была произведена такая вот примитивная декомпозиция
-user-controller - всё что связано с пользователем и логином
6.service: // Грубо говоря бизнес логика, тут я решил не разбивать, хотя по хорошему разбить на бизнес логику и на "серверную" логику, тот же логин сервис
- user-service - для пользователя логика

Реализованная логика:
1. С помощью дев ветки было проверено работоспособность сервера, соединение с бд и запушено роли без дополнительного модуля(лень мета)
2. Базовый регистр
3. Доступ по ролям через мидлвеар


Надо реализовать:
1.логин +
2.Логаут +
3.2 токена +
4.Роли +
5. Соеденить с клиентом+
6. Реализация ролей на сервере+
7. Админ панель
8. Рестораны
